// Generated by CoffeeScript 1.6.2
(function() {
  define('svg', ['line', 'helpers'], function(Line, helpers) {
    var SVG;

    SVG = (function() {
      SVG.prototype.version = 1.1;

      SVG.prototype.ns = 'http://www.w3.org/2000/svg';

      SVG.prototype.xlink = 'http://www.w3.org/1999/xlink';

      function SVG(o) {
        this.o = o != null ? o : {};
        this.grid = this.o.grid || App.grid;
        this.createCanvas(this.o.$el);
        this;
      }

      SVG.prototype.createCanvas = function($el) {
        var attrs;

        attrs = {
          version: this.version,
          xmlns: this.ns,
          'xmln:xlink': this.xlink,
          id: 'svg-canvas',
          style: 'left:0;top:0;right:0;bottom:0;position:absolute;',
          width: "" + this.grid.w + "em",
          height: "" + this.grid.h + "em"
        };
        this.canvas = this.createElement('svg', attrs);
        return $el[0].appendChild(this.canvas);
      };

      SVG.prototype.createElement = function(name, attrs) {
        var elem, tag;

        tag = name;
        elem = document.createElementNS(this.ns, tag);
        if (attrs === Object(attrs)) {
          this.setAttributes(elem, attrs);
        }
        return elem;
      };

      SVG.prototype.setAttribute = function(k, v) {
        return this.setAttribute(k, v);
      };

      SVG.prototype.removeAttribute = function(k) {
        return this.removeAttribute(k);
      };

      SVG.prototype.setAttributes = function(elem, attrs) {
        var attrName, attrValue;

        for (attrName in attrs) {
          attrValue = attrs[attrName];
          if (attrs.hasOwnProperty(attrName)) {
            this.setAttribute.call(elem, attrName, attrValue);
          }
        }
        return this;
      };

      SVG.prototype.removeAttributes = function(elem, attrs) {
        var attrName, attrValue;

        for (attrName in attrs) {
          attrValue = attrs[attrName];
          if (attrs.hasOwnProperty(attrName)) {
            this.removeAttribute.call(elem, attrName);
          }
        }
        return this;
      };

      SVG.prototype.lineToDom = function(id, elem) {
        this.canvas.appendChild(elem);
        return this;
      };

      SVG.prototype.removeElem = function(elem) {
        this.canvas.removeChild(elem);
        return this;
      };

      return SVG;

    })();
    return SVG;
  });

}).call(this);

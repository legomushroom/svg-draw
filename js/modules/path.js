// Generated by CoffeeScript 1.6.2
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define('path', ['two', 'jquery', 'helpers', 'ProtoClass'], function(Two, $, helpers, ProtoClass) {
    var Path;

    Path = (function(_super) {
      __extends(Path, _super);

      Path.prototype.type = 'path';

      Path.prototype.isHoldCell = false;

      function Path(o) {
        this.o = o != null ? o : {};
        this.id = helpers.genHash();
        if (this.o.coords) {
          this.set({
            startIJ: App.grid.toIJ(this.o.coords),
            endIJ: App.grid.toIJ(this.o.coords)
          });
        }
      }

      Path.prototype.onChange = function() {
        return this.render();
      };

      Path.prototype.render = function() {
        var i, path, point, xy, _i, _len, _results;

        path = App.grid.getGapPolyfill({
          from: this.startIJ,
          to: this.endIJ
        });
        this.addLine((path[0][0] * App.gs) + (App.gs / 2), (path[0][1] * App.gs) + (App.gs / 2));
        _results = [];
        for (i = _i = 0, _len = path.length; _i < _len; i = ++_i) {
          point = path[i];
          if (i === 0) {
            continue;
          }
          xy = App.grid.fromIJ({
            i: point[0],
            j: point[1]
          });
          _results.push(this.line.vertices.push(helpers.makePoint(xy.x, xy.y)));
        }
        return _results;
      };

      Path.prototype.addLine = function(x, y) {
        var vert, _i, _len, _ref, _ref1,
          _this = this;

        if ((_ref = this.line) != null) {
          _ref.remove();
        }
        this.line = App.two.makeLine(x, y, x, y);
        this.line.noFill().stroke = this.o.strokeColor || "#00DFFC";
        this.line.linewidth = this.o.strokeWidth || 2;
        _ref1 = this.line.vertices;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          vert = _ref1[_i];
          vert.addSelf(this.line.translation);
        }
        this.line.translation.clear();
        return setTimeout((function() {
          _this.$dom = $("#two-" + _this.line.id);
          return _this.addMarkers();
        }), 25);
      };

      Path.prototype.removeIfEmpty = function() {
        return this.isEmpty() && this.line.remove();
      };

      Path.prototype.isEmpty = function() {
        return this.line.vertices.length <= 2;
      };

      Path.prototype.addMarkers = function() {
        return this.$dom.attr('marker-mid', "url('#marker-mid')");
      };

      return Path;

    })(ProtoClass);
    return Path;
  });

}).call(this);

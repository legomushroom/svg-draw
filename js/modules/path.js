// Generated by CoffeeScript 1.6.2
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define('path', ['jquery', 'helpers', 'ProtoClass', 'line'], function($, helpers, ProtoClass, Line) {
    var Path;

    Path = (function(_super) {
      __extends(Path, _super);

      Path.prototype.type = 'path';

      Path.prototype.isHoldCell = false;

      function Path(o) {
        this.o = o != null ? o : {};
        this.id = helpers.genHash();
        if (this.o.coords) {
          this.set({
            startIJ: App.grid.toIJ(this.o.coords),
            endIJ: App.grid.toIJ(this.o.coords)
          });
        }
      }

      Path.prototype.onChange = function() {
        return this.render();
      };

      Path.prototype.render = function() {
        var i, path, point, points, xy, _i, _len;

        path = App.grid.getGapPolyfill({
          from: this.startIJ,
          to: this.endIJ
        });
        points = [];
        for (i = _i = 0, _len = path.length; _i < _len; i = ++_i) {
          point = path[i];
          xy = App.grid.fromIJ({
            i: point[0],
            j: point[1]
          });
          points.push(helpers.makePoint(xy.x, xy.y));
        }
        return this.addLine(points);
      };

      Path.prototype.addLine = function(points) {
        var _ref;

        if ((_ref = this.line) != null) {
          _ref.remove();
        }
        return this.line = new Line({
          points: points
        });
      };

      Path.prototype.removeIfEmpty = function() {
        return this.isEmpty() && this.line.remove();
      };

      Path.prototype.isEmpty = function() {
        return this.line.points.length <= 2;
      };

      return Path;

    })(ProtoClass);
    return Path;
  });

}).call(this);

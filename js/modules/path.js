// Generated by CoffeeScript 1.6.2
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define('path', ['jquery', 'helpers', 'ProtoClass', 'line', 'underscore', 'hammer'], function($, helpers, ProtoClass, Line, _, hammer) {
    var Path, _ref;

    Path = (function(_super) {
      __extends(Path, _super);

      function Path() {
        _ref = Path.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      Path.prototype.type = 'path';

      Path.prototype.initialize = function(o) {
        this.o = o != null ? o : {};
        this.set('id', helpers.genHash());
        if (this.o.coords) {
          this.set({
            'startIJ': App.grid.toIJ(this.o.coords),
            'endIJ': App.grid.toIJ(this.o.coords)
          });
        }
        this.on('change:startIJ', _.bind(this.onChange, this));
        return this.on('change:endIJ', _.bind(this.onChange, this));
      };

      Path.prototype.onChange = function() {
        this.set('oldIntersects', helpers.cloneObj(this.get('intersects')));
        return this.render();
      };

      Path.prototype.render = function(isRepaintIntersects) {
        if (isRepaintIntersects == null) {
          isRepaintIntersects = false;
        }
        this.removeFromGrid();
        this.recalcPath();
        this.makeSvgPath();
        return App.grid.refreshGrid();
      };

      Path.prototype.pushPoint = function(ij, i) {
        var node, point, xy, _ref1;

        xy = App.grid.fromIJ(ij);
        node = App.grid.atIJ(ij);
        if ((_ref1 = node.holders) == null) {
          node.holders = {};
        }
        node.holders[this.get('id')] = this;
        point = {
          x: xy.x,
          y: xy.y,
          curve: null,
          i: i
        };
        this.points.push(point);
        return this.points;
      };

      Path.prototype.recalcPath = function() {
        var coef, dir, endIJ, glimps, i, ij, node, side, startIJ, x1, x2, y1, _i, _j, _k, _l, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8;

        helpers.timeIn('path recalc');
        glimps = this.makeGlimps();
        this.points = [];
        startIJ = this.get('startIJ');
        endIJ = this.get('endIJ');
        dir = glimps.direction;
        this.direction = dir;
        this.set('direction', dir);
        coef = Math.ceil(glimps.base) > startIJ[dir] ? 1 : -1;
        node = dir === 'i' ? App.grid.grid.getNodeAt(startIJ[dir] + coef, startIJ.j) : App.grid.grid.getNodeAt(startIJ.i, startIJ[dir] + coef);
        if (!node.block) {
          for (i = _i = _ref1 = startIJ[dir], _ref2 = Math.ceil(glimps.base); _ref1 <= _ref2 ? _i <= _ref2 : _i >= _ref2; i = _ref1 <= _ref2 ? ++_i : --_i) {
            if (dir === 'i') {
              ij = {
                i: i,
                j: startIJ.j
              };
            } else {
              ij = {
                i: startIJ.i,
                j: i
              };
            }
            this.pushPoint(ij, i);
          }
        } else {
          if (dir === 'i') {
            x1 = startIJ.j - glimps.startBlock.get('startIJ').j;
            x2 = glimps.startBlock.get('endIJ').j - startIJ.j;
            y1 = endIJ.j - startIJ.j;
            side = x1 + y1 < x2 - y1 ? 'startIJ' : 'endIJ';
            coef = side === 'startIJ' ? 1 : 0;
            for (i = _j = _ref3 = startIJ.j, _ref4 = glimps.startBlock.get(side).j - coef; _ref3 <= _ref4 ? _j <= _ref4 : _j >= _ref4; i = _ref3 <= _ref4 ? ++_j : --_j) {
              ij = {
                i: startIJ.i,
                j: i
              };
              this.pushPoint(ij, i);
            }
            for (i = _k = _ref5 = startIJ.i, _ref6 = Math.ceil(glimps.base); _ref5 <= _ref6 ? _k <= _ref6 : _k >= _ref6; i = _ref5 <= _ref6 ? ++_k : --_k) {
              ij = {
                i: i,
                j: glimps.startBlock.get(side).j - coef
              };
              this.pushPoint(ij, i);
            }
          }
          console.log('make corner');
        }
        console.log(node);
        for (i = _l = _ref7 = Math.ceil(glimps.base), _ref8 = endIJ[dir]; _ref7 <= _ref8 ? _l <= _ref8 : _l >= _ref8; i = _ref7 <= _ref8 ? ++_l : --_l) {
          if (dir === 'i') {
            ij = {
              i: i,
              j: endIJ.j
            };
          } else {
            ij = {
              i: endIJ.i,
              j: i
            };
          }
          this.pushPoint(ij, i);
        }
        this.set('points', this.points);
        this.calcPolar();
        helpers.timeOut('path recalc');
        return this;
      };

      Path.prototype.makeGlimps = function() {
        var baseDirection, end, endBlock, endBlockH, endBlockW, endIJ, returnValue, start, startBlock, startBlockH, startBlockW, startIJ, xBase, xDifference, yBase, yDifference;

        startIJ = this.get('startIJ');
        endIJ = this.get('endIJ');
        startBlock = this.get('connectedStart');
        endBlock = this.get('connectedEnd');
        startBlockW = !startBlock ? 0 : startBlock.get('w') / 2;
        startBlockH = !startBlock ? 0 : startBlock.get('h') / 2;
        endBlockW = !endBlock ? 0 : endBlock.get('w') / 2;
        endBlockH = !endBlock ? 0 : endBlock.get('h') / 2;
        if (startIJ.i < endIJ.i) {
          end = startIJ.i + startBlockW;
          xDifference = (endIJ.i - endBlockW) - end;
          xBase = end + (xDifference / 2);
        } else {
          start = endIJ.i + endBlockW;
          xDifference = (startIJ.i - startBlockW) - start;
          xBase = start + (xDifference / 2);
        }
        if (startIJ.j < endIJ.j) {
          end = startIJ.j + startBlockH;
          yDifference = (endIJ.j - endBlockH) - end;
          yBase = end + (yDifference / 2);
        } else {
          start = endIJ.j + endBlockH;
          yDifference = (startIJ.j - startBlockH) - start;
          yBase = start + (yDifference / 2);
        }
        baseDirection = xDifference >= yDifference ? 'i' : 'j';
        return returnValue = {
          direction: baseDirection,
          base: baseDirection === 'i' ? xBase : yBase,
          startBlock: startBlock,
          endBlock: endBlock
        };
      };

      Path.prototype.calcPolar = function() {
        var firstPoint, lastPoint, points;

        points = this.get('points');
        firstPoint = points[0];
        lastPoint = points[points.length - 1];
        this.set('xPolar', firstPoint.x < lastPoint.x ? 'plus' : 'minus');
        return this.set('yPolar', firstPoint.y < lastPoint.y ? 'plus' : 'minus');
      };

      Path.prototype.repaintIntersects = function(intersects) {
        var name, path;

        for (name in intersects) {
          path = intersects[name];
          if (path.id === this.id) {
            continue;
          }
          path.render([path.id]);
        }
        return this.set('oldIntersects', {});
      };

      Path.prototype.detectCollisions = function() {
        var myDirection, name, node, path, point, _i, _len, _ref1, _results,
          _this = this;

        this.set('intersects', {});
        _ref1 = this.get('points');
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          point = _ref1[_i];
          myDirection = this.directionAt(point);
          node = App.grid.at(point);
          if (_.size(node.holders) > 1) {
            _.chain(node.holders).where({
              type: 'path'
            }).each(function(holder) {
              return _this.set('intersects', (_this.get('intersects')[holder.id] = holder));
            });
            _results.push((function() {
              var _ref2, _results1;

              _ref2 = this.get('intersects');
              _results1 = [];
              for (name in _ref2) {
                path = _ref2[name];
                if (path.get('id' === this.get('id'))) {
                  continue;
                }
                if (myDirection !== path.directionAt(point) && path.directionAt(point) !== 'corner' && myDirection !== 'corner') {
                  _results1.push(point.curve = "" + myDirection);
                } else {
                  _results1.push(void 0);
                }
              }
              return _results1;
            }).call(this));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };

      Path.prototype.directionAt = function(xy) {
        var direction, point, points, _ref1, _ref2, _ref3, _ref4;

        points = this.get('points');
        point = _.where(points, {
          x: xy.x,
          y: xy.y
        })[0];
        if (!point) {
          return 'corner';
        }
        if (((_ref1 = points[point.i - 1]) != null ? _ref1.x : void 0) === point.x && ((_ref2 = points[point.i + 1]) != null ? _ref2.x : void 0) === point.x) {
          direction = 'vertical';
        } else if (((_ref3 = points[point.i - 1]) != null ? _ref3.y : void 0) === point.y && ((_ref4 = points[point.i + 1]) != null ? _ref4.y : void 0) === point.y) {
          direction = 'horizontal';
        } else {
          direction = 'corner';
        }
        return direction;
      };

      Path.prototype.makeSvgPath = function() {
        var _this = this;

        if (this.line == null) {
          this.line = new Line({
            path: this
          });
          return hammer(this.line.line).on('touch', function() {
            return console.log('touch');
          });
        } else {
          return this.line.resetPoints(this.get('points'));
        }
      };

      Path.prototype.removeFromGrid = function() {
        var node, point, points, _i, _len, _results;

        points = this.get('points');
        if (points == null) {
          return;
        }
        _results = [];
        for (_i = 0, _len = points.length; _i < _len; _i++) {
          point = points[_i];
          node = App.grid.at(point);
          _results.push(delete node.holders[this.get('id')]);
        }
        return _results;
      };

      Path.prototype.removeIfEmpty = function() {
        if (this.isEmpty()) {
          this.line.remove();
          this.removeFromGrid();
        }
        return App.grid.refreshGrid();
      };

      Path.prototype.isEmpty = function() {
        var _ref1;

        return ((_ref1 = this.line) != null ? _ref1.get('points').length : void 0) <= 2;
      };

      return Path;

    })(ProtoClass);
    return Path;
  });

}).call(this);

// Generated by CoffeeScript 1.6.2
(function() {
  define('block', ['helpers'], function(helpers) {
    var Block;

    Block = (function() {
      function Block(o) {
        this.o = o != null ? o : {};
        this.id = helpers.genHash();
        this.type = 'block';
        this.isHoldCell = true;
        this.isValid = true;
        this.sizeIJ = {
          i: 1,
          j: 1
        };
        this.coords = this.o.coords || {
          x: 0,
          y: 0
        };
        this.coords = App.grid.getNearestCell(this.coords);
        this.addSelfToDom();
        this.ij = App.grid.toIJ({
          x: this.coords.x,
          y: this.coords.y
        });
        App.grid.holdCell(this.ij, this);
        this;
      }

      Block.prototype.addSelfToDom = function() {
        this.$el = $('<div>').addClass('block-e');
        App.$main.append(this.$el);
        this.top = this.coords.y;
        this.left = this.coords.x;
        this.render();
        return this;
      };

      Block.prototype.dragResize = function(deltas) {
        deltas = App.grid.getNearestCell(deltas);
        this.newSizeIJ = App.grid.toIJ(deltas);
        this.w = deltas.x;
        this.h = deltas.y;
        this.isValid = this.isSuiteSize();
        this.render();
        return this;
      };

      Block.prototype.isSuiteSize = function() {
        var i, j, node, _i, _j, _ref, _ref1, _ref2, _ref3;

        for (i = _i = _ref = this.ij.i + this.sizeIJ.i, _ref1 = this.ij.i + this.newSizeIJ.i; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; i = _ref <= _ref1 ? ++_i : --_i) {
          for (j = _j = _ref2 = this.ij.j + this.sizeIJ.j, _ref3 = this.ij.j + this.newSizeIJ.j; _ref2 <= _ref3 ? _j <= _ref3 : _j >= _ref3; j = _ref2 <= _ref3 ? ++_j : --_j) {
            node = App.grid.grid.getNodeAt(i, j);
            if (!node.walkable && (node.holder.id !== this.id)) {
              return false;
            }
          }
        }
        return true;
      };

      Block.prototype.setToGrid = function() {
        var i, j, _i, _ref, _ref1, _results;

        _results = [];
        for (i = _i = _ref = this.ij.i, _ref1 = this.ij.i + this.sizeIJ.i; _ref <= _ref1 ? _i < _ref1 : _i > _ref1; i = _ref <= _ref1 ? ++_i : --_i) {
          _results.push((function() {
            var _j, _ref2, _ref3, _results1;

            _results1 = [];
            for (j = _j = _ref2 = this.ij.j, _ref3 = this.ij.j + this.sizeIJ.j; _ref2 <= _ref3 ? _j < _ref3 : _j > _ref3; j = _ref2 <= _ref3 ? ++_j : --_j) {
              if (App.grid.holdCell({
                i: i,
                j: j
              }, this)) {
                this.isValid = false;
                _results1.push(this.render());
              } else {
                _results1.push(void 0);
              }
            }
            return _results1;
          }).call(this));
        }
        return _results;
      };

      Block.prototype.render = function() {
        return this.$el.css({
          'width': this.w || 0,
          'height': this.h || 0,
          'top': this.top || 0,
          'left': this.left || 0
        }).toggleClass('is-invalid', !this.isValid || (this.w < App.gs) || (this.h < App.gs));
      };

      Block.prototype.removeSelf = function() {
        return this.removeSelfFromDom();
      };

      Block.prototype.removeSelfFromDom = function() {
        return this.$el.remove();
      };

      return Block;

    })();
    return Block;
  });

}).call(this);

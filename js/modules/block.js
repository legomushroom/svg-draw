// Generated by CoffeeScript 1.6.2
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define('block', ['helpers', 'ProtoClass', 'hammer', 'path', 'port'], function(helpers, ProtoClass, hammer, Path, Port) {
    var Block;

    Block = (function(_super) {
      __extends(Block, _super);

      Block.prototype.type = 'block';

      function Block(o) {
        var coords;

        this.o = o != null ? o : {};
        this.id = helpers.genHash();
        this.isValid = false;
        this.startIJ = {
          i: 0,
          j: 0
        };
        this.endIJ = {
          i: 0,
          j: 0
        };
        this.isDragMode = true;
        if (this.o.coords) {
          coords = App.grid.normalizeCoords(App.grid.getNearestCell(this.o.coords || {
            x: 0,
            y: 0
          }));
          this.set('startIJ', coords);
        }
        this.createPort();
        this.onChange = this.render;
        this;
      }

      Block.prototype.createPort = function() {
        return this.port = new Port({
          parent: this
        });
      };

      Block.prototype.render = function() {
        this.calcDimentions();
        if (this.$el == null) {
          this.$el = $('<div>').addClass('block-e').append($('<div>'));
          App.$main.append(this.$el);
          this.listenEvents();
        }
        this.$el.css({
          'width': this.w * App.gs,
          'height': this.h * App.gs,
          'top': this.startIJ.j * App.gs,
          'left': this.startIJ.i * App.gs
        }).toggleClass('is-invalid', !this.isValid || (this.w * App.gs < App.gs) || (this.h * App.gs < App.gs));
        return this;
      };

      Block.prototype.calcDimentions = function() {
        this.w = this.endIJ.i - this.startIJ.i;
        this.h = this.endIJ.j - this.startIJ.j;
        return this.refreshPort();
      };

      Block.prototype.listenEvents = function() {
        var _this = this;

        hammer(this.$el[0]).on('touch', function(e) {
          var coords;

          coords = helpers.getEventCoords(e);
          if (App.currTool === 'path') {
            return App.isBlockToPath = _this.port.addConnection();
          }
        });
        hammer(this.$el[0]).on('drag', function(e) {
          var coords;

          coords = helpers.getEventCoords(e);
          if (App.currTool === 'block') {
            _this.moveTo({
              x: e.gesture.deltaX,
              y: e.gesture.deltaY
            });
            return false;
          }
        });
        hammer(this.$el[0]).on('release', function(e) {
          var coords;

          coords = helpers.getEventCoords(e);
          if (App.currTool === 'path') {
            if (App.currPath && App.currBlock) {
              App.currBlock.port.addConnection(App.currPath);
              return App.isBlockToPath = null;
            }
          } else {
            _this.removeOldSelfFromGrid();
            _this.addFinilize();
            return false;
          }
        });
        this.$el.on('mouseenter', function() {
          if (_this.isDragMode) {
            return;
          }
          App.currBlock = _this;
          if (App.currTool === 'path') {
            return _this.$el.addClass('is-connect-path');
          } else {
            return _this.$el.addClass('is-drag');
          }
        });
        return this.$el.on('mouseleave', function() {
          if (_this.isDragMode) {
            return;
          }
          App.currBlock = null;
          if (App.currTool === 'path') {
            return _this.$el.removeClass('is-connect-path');
          } else {
            return _this.$el.removeClass('is-drag');
          }
        });
      };

      Block.prototype.moveTo = function(coords) {
        coords = App.grid.normalizeCoords(coords);
        if (!this.isMoveTo) {
          this.buffStartIJ = this.startIJ;
          this.buffEndIJ = this.endIJ;
          this.isMoveTo = true;
          this.removeOldSelfFromGrid();
        }
        return this.set({
          'startIJ': {
            i: this.buffStartIJ.i + coords.i,
            j: this.buffStartIJ.j + coords.j
          },
          'endIJ': {
            i: this.buffEndIJ.i + coords.i,
            j: this.buffEndIJ.j + coords.j
          },
          'isValid': this.isSuiteSize()
        });
      };

      Block.prototype.setSizeDelta = function(deltas) {
        return this.set({
          'endIJ': {
            i: this.startIJ.i + deltas.i,
            j: this.startIJ.j + deltas.j
          },
          'isValid': this.isSuiteSize()
        });
      };

      Block.prototype.isSuiteSize = function() {
        var i, j, node, _i, _j, _ref, _ref1, _ref2, _ref3;

        for (i = _i = _ref = this.startIJ.i, _ref1 = this.endIJ.i; _ref <= _ref1 ? _i < _ref1 : _i > _ref1; i = _ref <= _ref1 ? ++_i : --_i) {
          for (j = _j = _ref2 = this.startIJ.j, _ref3 = this.endIJ.j; _ref2 <= _ref3 ? _j < _ref3 : _j > _ref3; j = _ref2 <= _ref3 ? ++_j : --_j) {
            node = App.grid.grid.getNodeAt(i, j);
            if (!node.walkable && (node.holder.id !== this.id)) {
              return false;
            }
          }
        }
        this.calcDimentions();
        return this.w > 0 && this.h > 0;
      };

      Block.prototype.addFinilize = function() {
        this.isMoveTo = false;
        if (!this.isValid) {
          this.removeSelf();
          return false;
        }
        this.setToGrid();
        return this.isDragMode = false;
      };

      Block.prototype.refreshPort = function() {
        return this.port.setIJ();
      };

      Block.prototype.setToGrid = function() {
        App.grid.refreshGrid();
        return true;
      };

      Block.prototype.removeSelf = function() {
        this.removeSelfFromGrid();
        return this.removeSelfFromDom();
      };

      Block.prototype.removeSelfFromGrid = function() {
        return App.grid.refreshGrid();
      };

      Block.prototype.removeSelfFromDom = function() {
        return this.$el.remove();
      };

      Block.prototype.removeOldSelfFromGrid = function() {
        return App.grid.refreshGrid();
      };

      return Block;

    })(ProtoClass);
    return Block;
  });

}).call(this);

// Generated by CoffeeScript 1.6.2
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define('block', ['helpers', 'ProtoClass', 'hammer', 'path', 'port'], function(helpers, ProtoClass, hammer, Path, Port) {
    var Block;

    Block = (function(_super) {
      __extends(Block, _super);

      Block.prototype.type = 'block';

      Block.prototype.isValid = false;

      Block.prototype.sizeIJ = {
        i: 1,
        j: 1
      };

      Block.prototype.newSizeIJ = {
        i: 0,
        j: 0
      };

      Block.prototype.paths = [];

      function Block(o) {
        this.o = o != null ? o : {};
        this.id = helpers.genHash();
        this.coords = App.grid.getNearestCell(this.o.coords || {
          x: 0,
          y: 0
        });
        this.startIJ = App.grid.toIJ({
          x: this.coords.x,
          y: this.coords.y
        });
        this.addSelfToDom();
        this.onChange = this.render;
        this.port1 = new Port({
          role: 'top',
          parent: this
        });
        this;
      }

      Block.prototype.addSelfToDom = function() {
        this.$el = $('<div>').addClass('block-e').append($('<div>'));
        App.$main.append(this.$el);
        this.set({
          'top': this.coords.y,
          'left': this.coords.x
        });
        this.listenEvents();
        return this;
      };

      Block.prototype.listenEvents = function() {
        var _this = this;

        hammer(this.$el[0]).on('touch', function() {
          if (App.currTool === 'path') {
            return _this.connectPath();
          }
        });
        this.$el.on('mouseenter', function() {
          if (App.currTool === 'path') {
            return _this.$el.addClass('is-connect-path');
          }
        });
        return this.$el.on('mouseleave', function() {
          if (App.currTool === 'path') {
            return _this.$el.removeClass('is-connect-path');
          }
        });
      };

      Block.prototype.connectPath = function() {
        return App.isBlockToPath = this.port1.addConnection();
      };

      Block.prototype.dragResize = function(deltas) {
        deltas = App.grid.getNearestCell(deltas);
        this.newSizeIJ = App.grid.toIJ(deltas);
        this.port1.setIJ();
        this.set({
          'isValid': this.isSuiteSize(),
          'w': deltas.x,
          'h': deltas.y
        });
        return this;
      };

      Block.prototype.isSuiteSize = function() {
        var i, j, node, _i, _j, _ref, _ref1, _ref2, _ref3;

        for (i = _i = _ref = this.startIJ.i + this.sizeIJ.i, _ref1 = this.startIJ.i + this.newSizeIJ.i; _ref <= _ref1 ? _i < _ref1 : _i > _ref1; i = _ref <= _ref1 ? ++_i : --_i) {
          for (j = _j = _ref2 = this.startIJ.j + this.sizeIJ.j, _ref3 = this.startIJ.j + this.newSizeIJ.j; _ref2 <= _ref3 ? _j < _ref3 : _j > _ref3; j = _ref2 <= _ref3 ? ++_j : --_j) {
            node = App.grid.grid.getNodeAt(i, j);
            if (!node.walkable && (node.holder.id !== this.id)) {
              return false;
            }
          }
        }
        return this.newSizeIJ.i > 0 && this.newSizeIJ.j > 0;
      };

      Block.prototype.setToGrid = function() {
        var i, j, _i, _j, _ref, _ref1, _ref2, _ref3;

        for (i = _i = _ref = this.startIJ.i, _ref1 = this.startIJ.i + this.newSizeIJ.i; _ref <= _ref1 ? _i < _ref1 : _i > _ref1; i = _ref <= _ref1 ? ++_i : --_i) {
          for (j = _j = _ref2 = this.startIJ.j, _ref3 = this.startIJ.j + this.newSizeIJ.j; _ref2 <= _ref3 ? _j < _ref3 : _j > _ref3; j = _ref2 <= _ref3 ? ++_j : --_j) {
            if (!App.grid.holdCell({
              i: i,
              j: j
            }, this)) {
              this.set('isValid', false);
              return false;
            }
          }
        }
      };

      Block.prototype.render = function() {
        return this.$el.css({
          'width': this.w || 0,
          'height': this.h || 0,
          'top': this.top || 0,
          'left': this.left || 0
        }).toggleClass('is-invalid', !this.isValid || (this.w < App.gs) || (this.h < App.gs));
      };

      Block.prototype.addFinilize = function() {
        if (!this.isValid) {
          this.removeSelf();
          return false;
        }
        this.setToGrid();
        return App.grid.refreshGrid();
      };

      Block.prototype.removeSelf = function() {
        this.removeSelfFromGrid();
        return this.removeSelfFromDom();
      };

      Block.prototype.removeSelfFromGrid = function() {
        var i, j, _i, _ref, _ref1, _results;

        _results = [];
        for (i = _i = _ref = this.startIJ.i, _ref1 = this.startIJ.i + this.newSizeIJ.i; _ref <= _ref1 ? _i < _ref1 : _i > _ref1; i = _ref <= _ref1 ? ++_i : --_i) {
          _results.push((function() {
            var _j, _ref2, _ref3, _results1;

            _results1 = [];
            for (j = _j = _ref2 = this.startIJ.j, _ref3 = this.startIJ.j + this.newSizeIJ.j; _ref2 <= _ref3 ? _j < _ref3 : _j > _ref3; j = _ref2 <= _ref3 ? ++_j : --_j) {
              _results1.push(App.grid.releaseCell({
                i: i,
                j: j
              }, this));
            }
            return _results1;
          }).call(this));
        }
        return _results;
      };

      Block.prototype.removeSelfFromDom = function() {
        return this.$el.remove();
      };

      return Block;

    })(ProtoClass);
    return Block;
  });

}).call(this);

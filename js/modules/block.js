// Generated by CoffeeScript 1.6.2
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define('block', ['helpers', 'ProtoClass', 'hammer', 'path', 'port'], function(helpers, ProtoClass, hammer, Path, Port) {
    var Block;

    Block = (function(_super) {
      __extends(Block, _super);

      Block.prototype.type = 'block';

      Block.prototype.isValid = false;

      Block.prototype.sizeIJ = {
        i: 1,
        j: 1
      };

      Block.prototype.newSizeIJ = {
        i: 0,
        j: 0
      };

      Block.prototype.paths = [];

      function Block(o) {
        this.o = o != null ? o : {};
        this.id = helpers.genHash();
        this.coords = App.grid.getNearestCell(this.o.coords || {
          x: 0,
          y: 0
        });
        this.startIJ = App.grid.toIJ({
          x: this.coords.x,
          y: this.coords.y
        });
        this.addSelfToDom();
        this.onChange = this.render;
        this.createPorts();
        this;
      }

      Block.prototype.createPorts = function() {
        var i, portRoles, role, _i, _len, _results;

        this.ports = {};
        portRoles = ['top', 'bottom', 'left', 'right'];
        _results = [];
        for (i = _i = 0, _len = portRoles.length; _i < _len; i = ++_i) {
          role = portRoles[i];
          _results.push(this.ports[role] = new Port({
            role: portRoles[i],
            parent: this
          }));
        }
        return _results;
      };

      Block.prototype.addSelfToDom = function() {
        this.$el = $('<div>').addClass('block-e').append($('<div>'));
        App.$main.append(this.$el);
        this.set({
          'top': this.coords.y,
          'left': this.coords.x
        });
        this.listenEvents();
        return this;
      };

      Block.prototype.listenEvents = function() {
        var _this = this;

        hammer(this.$el[0]).on('touch', function(e) {
          var coords;

          coords = helpers.getEventCoords(e);
          if (App.currTool === 'path') {
            return _this.getNearestPort(coords).addConnection();
          }
        });
        hammer(this.$el[0]).on('release', function(e) {
          var coords;

          coords = helpers.getEventCoords(e);
          if (App.currTool === 'path' && App.currPath) {
            return _this.getNearestPort(coords).addConnection(App.currPath);
          }
        });
        this.$el.on('mouseenter', function() {
          App.currBlock = _this;
          if (App.currTool === 'path') {
            return _this.$el.addClass('is-connect-path');
          }
        });
        return this.$el.on('mouseleave', function() {
          App.currBlock = null;
          if (App.currTool === 'path') {
            return _this.$el.removeClass('is-connect-path');
          }
        });
      };

      Block.prototype.getNearestPort = function(coords) {
        var i, ij, j, min, port, portName, _ref;

        ij = App.grid.normalizeCoords(coords);
        min = {
          ij: {
            i: -1,
            j: -1
          },
          port: null
        };
        _ref = this.ports;
        for (portName in _ref) {
          port = _ref[portName];
          console.log(port.ij);
          i = Math.abs(port.ij.i - ij.i);
          j = Math.abs(port.ij.j - ij.j);
          console.log(i, j);
          if (min.ij.i < i || min.ij.j < j) {
            min.ij = {
              i: i,
              j: j
            };
            min.port = port;
          }
        }
        console.log(min.port);
        if (min.port === null) {
          return this.ports['bottom'];
        } else {
          return min.port;
        }
      };

      Block.prototype.dragResize = function(deltas) {
        deltas = App.grid.getNearestCell(deltas);
        this.set('newSizeIJ', App.grid.toIJ(deltas));
        this.refreshPorts();
        this.set({
          'isValid': this.isSuiteSize(),
          'w': deltas.x,
          'h': deltas.y
        });
        return this;
      };

      Block.prototype.refreshPorts = function() {
        var port, portName, _ref, _results;

        _ref = this.ports;
        _results = [];
        for (portName in _ref) {
          port = _ref[portName];
          _results.push(port.setIJ());
        }
        return _results;
      };

      Block.prototype.isSuiteSize = function() {
        var i, j, node, _i, _j, _ref, _ref1, _ref2, _ref3;

        for (i = _i = _ref = this.startIJ.i + this.sizeIJ.i, _ref1 = this.startIJ.i + this.newSizeIJ.i; _ref <= _ref1 ? _i < _ref1 : _i > _ref1; i = _ref <= _ref1 ? ++_i : --_i) {
          for (j = _j = _ref2 = this.startIJ.j + this.sizeIJ.j, _ref3 = this.startIJ.j + this.newSizeIJ.j; _ref2 <= _ref3 ? _j < _ref3 : _j > _ref3; j = _ref2 <= _ref3 ? ++_j : --_j) {
            node = App.grid.grid.getNodeAt(i, j);
            if (!node.walkable && (node.holder.id !== this.id)) {
              return false;
            }
          }
        }
        return this.newSizeIJ.i > 0 && this.newSizeIJ.j > 0;
      };

      Block.prototype.setToGrid = function() {
        var i, j, _i, _j, _ref, _ref1, _ref2, _ref3;

        for (i = _i = _ref = this.startIJ.i, _ref1 = this.startIJ.i + this.newSizeIJ.i; _ref <= _ref1 ? _i < _ref1 : _i > _ref1; i = _ref <= _ref1 ? ++_i : --_i) {
          for (j = _j = _ref2 = this.startIJ.j, _ref3 = this.startIJ.j + this.newSizeIJ.j; _ref2 <= _ref3 ? _j < _ref3 : _j > _ref3; j = _ref2 <= _ref3 ? ++_j : --_j) {
            if (!App.grid.holdCell({
              i: i,
              j: j
            }, this)) {
              this.set('isValid', false);
              return false;
            }
          }
        }
      };

      Block.prototype.render = function() {
        return this.$el.css({
          'width': this.w || 0,
          'height': this.h || 0,
          'top': this.top || 0,
          'left': this.left || 0
        }).toggleClass('is-invalid', !this.isValid || (this.w < App.gs) || (this.h < App.gs));
      };

      Block.prototype.addFinilize = function() {
        if (!this.isValid) {
          this.removeSelf();
          return false;
        }
        this.setToGrid();
        return App.grid.refreshGrid();
      };

      Block.prototype.removeSelf = function() {
        this.removeSelfFromGrid();
        return this.removeSelfFromDom();
      };

      Block.prototype.removeSelfFromGrid = function() {
        var i, j, _i, _ref, _ref1, _results;

        _results = [];
        for (i = _i = _ref = this.startIJ.i, _ref1 = this.startIJ.i + this.newSizeIJ.i; _ref <= _ref1 ? _i < _ref1 : _i > _ref1; i = _ref <= _ref1 ? ++_i : --_i) {
          _results.push((function() {
            var _j, _ref2, _ref3, _results1;

            _results1 = [];
            for (j = _j = _ref2 = this.startIJ.j, _ref3 = this.startIJ.j + this.newSizeIJ.j; _ref2 <= _ref3 ? _j < _ref3 : _j > _ref3; j = _ref2 <= _ref3 ? ++_j : --_j) {
              _results1.push(App.grid.releaseCell({
                i: i,
                j: j
              }, this));
            }
            return _results1;
          }).call(this));
        }
        return _results;
      };

      Block.prototype.removeSelfFromDom = function() {
        return this.$el.remove();
      };

      return Block;

    })(ProtoClass);
    return Block;
  });

}).call(this);

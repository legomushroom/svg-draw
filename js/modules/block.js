// Generated by CoffeeScript 1.6.2
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define('block', ['backbone', 'underscore', 'helpers', 'ProtoClass', 'hammer', 'path', 'port'], function(B, _, helpers, ProtoClass, hammer, Path, Port) {
    var Block, _ref;

    Block = (function(_super) {
      __extends(Block, _super);

      function Block() {
        _ref = Block.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      Block.prototype.type = 'block';

      Block.prototype.defaults = {
        isValid: false,
        startIJ: {
          i: 0,
          j: 0
        },
        endIJ: {
          i: 0,
          j: 0
        },
        isDragMode: true,
        isValidPosition: true,
        isValidSize: false
      };

      Block.prototype.initialize = function(o) {
        var coords;

        this.o = o != null ? o : {};
        this.set({
          'id': helpers.genHash()
        });
        if (this.o.coords) {
          coords = App.grid.normalizeCoords(App.grid.getNearestCell(this.o.coords || {
            x: 0,
            y: 0
          }));
          this.set({
            'startIJ': coords,
            'endIJ': coords
          });
        }
        this.createPort();
        this.render();
        this.on('change', _.bind(this.render, this));
        return this;
      };

      Block.prototype.createPort = function() {
        return this.port = new Port({
          parent: this
        });
      };

      Block.prototype.render = function() {
        var startIJ;

        this.calcDimentions();
        this.removeOldSelfFromGrid();
        if (this.$el == null) {
          this.$el = $('<div>').addClass('block-e').append($('<div>'));
          App.$main.append(this.$el);
          this.listenEvents();
        }
        startIJ = this.get('startIJ');
        this.$el.css({
          'width': this.get('w') * App.gs,
          'height': this.get('h') * App.gs,
          'top': startIJ.j * App.gs,
          'left': startIJ.i * App.gs
        }).toggleClass('is-invalid', !this.get('isValid') || (this.get('w') * App.gs < App.gs) || (this.get('h') * App.gs < App.gs));
        return this;
      };

      Block.prototype.calcDimentions = function() {
        var endIJ, startIJ;

        startIJ = this.get('startIJ');
        endIJ = this.get('endIJ');
        this.set({
          'w': endIJ.i - startIJ.i,
          'h': endIJ.j - startIJ.j
        });
        return this.refreshPort();
      };

      Block.prototype.listenEvents = function() {
        var _this = this;

        hammer(this.$el[0]).on('touch', function(e) {
          var coords;

          coords = helpers.getEventCoords(e);
          if (App.currTool === 'path') {
            App.isBlockToPath = _this.port.addConnection();
          }
          return helpers.stopEvent(e);
        });
        hammer(this.$el[0]).on('drag', function(e) {
          var coords;

          if (App.blockDrag) {
            return true;
          }
          coords = helpers.getEventCoords(e);
          if (App.currTool === 'block') {
            _this.moveTo({
              x: e.gesture.deltaX,
              y: e.gesture.deltaY
            });
            return helpers.stopEvent(e);
          }
        });
        hammer(this.$el[0]).on('release', function(e) {
          var coords;

          coords = helpers.getEventCoords(e);
          if (App.currTool === 'path') {
            if (App.currPath && App.currBlock) {
              App.currBlock.port.addConnection(App.currPath);
              App.currPath.currentAddPoint = null;
              App.isBlockToPath = null;
            }
          } else {
            _this.removeOldSelfFromGrid();
            _this.addFinilize();
            return false;
          }
          return helpers.stopEvent(e);
        });
        this.$el.on('mouseenter', function() {
          if (_this.isDragMode) {
            return;
          }
          App.currBlock = _this;
          if (App.currTool === 'path') {
            return _this.$el.addClass('is-connect-path');
          } else {
            return _this.$el.addClass('is-drag');
          }
        });
        return this.$el.on('mouseleave', function() {
          if (_this.isDragMode) {
            return;
          }
          App.currBlock = null;
          if (App.currTool === 'path') {
            return _this.$el.removeClass('is-connect-path');
          } else {
            return _this.$el.removeClass('is-drag');
          }
        });
      };

      Block.prototype.moveTo = function(coords) {
        var bottom, left, right, shift, top;

        coords = App.grid.normalizeCoords(coords);
        if (!this.isMoveTo) {
          this.buffStartIJ = helpers.cloneObj(this.get('startIJ'));
          this.buffEndIJ = helpers.cloneObj(this.get('endIJ'));
          this.isMoveTo = true;
        }
        top = this.buffStartIJ.j + coords.j;
        bottom = this.buffEndIJ.j + coords.j;
        left = this.buffStartIJ.i + coords.i;
        right = this.buffEndIJ.i + coords.i;
        if (top < 0) {
          shift = top;
          top = 0;
          bottom = top + this.get('h');
        }
        if (left < 0) {
          shift = left;
          left = 0;
          right = left + this.get('w');
        }
        return this.set({
          'startIJ': {
            i: left,
            j: top
          },
          'endIJ': {
            i: right,
            j: bottom
          },
          'isValid': this.isSuiteSize()
        });
      };

      Block.prototype.setSizeDelta = function(deltas) {
        var startIJ;

        startIJ = this.get('startIJ');
        return this.set({
          'endIJ': {
            i: startIJ.i + deltas.i,
            j: startIJ.j + deltas.j
          },
          'isValid': this.isSuiteSize()
        });
      };

      Block.prototype.isSuiteSize = function() {
        var endIJ, i, isValidSize, j, node, startIJ, _i, _j, _ref1, _ref2, _ref3, _ref4;

        startIJ = this.get('startIJ');
        endIJ = this.get('endIJ');
        this.isValidPosition = true;
        for (i = _i = _ref1 = startIJ.i, _ref2 = endIJ.i; _ref1 <= _ref2 ? _i < _ref2 : _i > _ref2; i = _ref1 <= _ref2 ? ++_i : --_i) {
          for (j = _j = _ref3 = startIJ.j, _ref4 = endIJ.j; _ref3 <= _ref4 ? _j < _ref4 : _j > _ref4; j = _ref3 <= _ref4 ? ++_j : --_j) {
            node = App.grid.grid.getNodeAt(i, j);
            if ((node.block != null) && (node.block.get('id') !== this.get('id'))) {
              this.set('isValidPosition', false);
              return false;
            }
          }
        }
        this.calcDimentions();
        isValidSize = this.get('w') > 0 && this.get('h') > 0;
        this.set({
          'isValidSize': isValidSize,
          'isValidPosition': true
        });
        return isValidSize;
      };

      Block.prototype.addFinilize = function() {
        this.isMoveTo = false;
        if (!this.get('isValid') && !this.get('isValidSize')) {
          this.removeSelf();
          return false;
        } else if (!this.get('isValidPosition')) {
          this.set({
            'startIJ': helpers.cloneObj(this.buffStartIJ),
            'endIJ': helpers.cloneObj(this.buffEndIJ),
            'isValid': true,
            'isValidPosition': true
          });
        }
        this.isDragMode = false;
        return this.setToGrid();
      };

      Block.prototype.refreshPort = function() {
        return this.port.setIJ();
      };

      Block.prototype.setToGrid = function() {
        var endIJ, i, j, startIJ, _i, _j, _ref1, _ref2, _ref3, _ref4;

        startIJ = this.get('startIJ');
        endIJ = this.get('endIJ');
        for (i = _i = _ref1 = startIJ.i, _ref2 = endIJ.i; _ref1 <= _ref2 ? _i < _ref2 : _i > _ref2; i = _ref1 <= _ref2 ? ++_i : --_i) {
          for (j = _j = _ref3 = startIJ.j, _ref4 = endIJ.j; _ref3 <= _ref4 ? _j < _ref4 : _j > _ref4; j = _ref3 <= _ref4 ? ++_j : --_j) {
            if (!App.grid.holdCell({
              i: i,
              j: j
            }, this)) {
              this.set('isValid', false);
              return false;
            }
          }
        }
        App.grid.refreshGrid();
        return true;
      };

      Block.prototype.removeSelf = function() {
        this.removeSelfFromGrid();
        return this.removeSelfFromDom();
      };

      Block.prototype.removeSelfFromGrid = function() {
        var endIJ, i, j, startIJ, _i, _j, _ref1, _ref2, _ref3, _ref4;

        startIJ = this.get('startIJ');
        endIJ = this.get('endIJ');
        for (i = _i = _ref1 = startIJ.i, _ref2 = endIJ.i; _ref1 <= _ref2 ? _i < _ref2 : _i > _ref2; i = _ref1 <= _ref2 ? ++_i : --_i) {
          for (j = _j = _ref3 = startIJ.j, _ref4 = endIJ.j; _ref3 <= _ref4 ? _j < _ref4 : _j > _ref4; j = _ref3 <= _ref4 ? ++_j : --_j) {
            App.grid.releaseCell({
              i: i,
              j: j
            }, this);
          }
        }
        return App.grid.refreshGrid();
      };

      Block.prototype.removeSelfFromDom = function() {
        return this.$el.remove();
      };

      Block.prototype.removeOldSelfFromGrid = function() {
        var i, j, _i, _j, _ref1, _ref2, _ref3, _ref4;

        if (this.buffStartIJ == null) {
          return;
        }
        for (i = _i = _ref1 = this.buffStartIJ.i, _ref2 = this.buffEndIJ.i; _ref1 <= _ref2 ? _i < _ref2 : _i > _ref2; i = _ref1 <= _ref2 ? ++_i : --_i) {
          for (j = _j = _ref3 = this.buffStartIJ.j, _ref4 = this.buffEndIJ.j; _ref3 <= _ref4 ? _j < _ref4 : _j > _ref4; j = _ref3 <= _ref4 ? ++_j : --_j) {
            App.grid.releaseCell({
              i: i,
              j: j
            }, this);
          }
        }
        return App.grid.refreshGrid();
      };

      return Block;

    })(ProtoClass);
    return Block;
  });

}).call(this);

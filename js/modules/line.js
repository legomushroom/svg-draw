// Generated by CoffeeScript 1.6.2
(function() {
  define('line', ['helpers'], function(helpers) {
    var Line;

    return Line = (function() {
      function Line(o) {
        this.o = o != null ? o : {};
        this.id = helpers.genHash();
        this.points = this.o.points || [];
        this.addDomElement();
        this;
      }

      Line.prototype.addDomElement = function() {
        var attr;

        attr = {
          id: this.id,
          d: '',
          stroke: '#00DFFC',
          'stroke-width': 2,
          fill: 'none',
          'marker-mid': 'url(#marker-mid)'
        };
        this.line = App.SVG.createElement('path', attr);
        this.serialize();
        return App.SVG.lineToDom(this.id, this.line);
      };

      Line.prototype.serialize = function() {
        var i, point, str, xRadius, xShift, yRadius, yShift, _i, _len, _ref;

        str = '';
        _ref = this.points;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          point = _ref[i];
          if (i === 0) {
            str += "M" + point.x + "," + point.y + " ";
          } else {
            if (point.curve == null) {
              str += "L " + point.x + ", " + point.y + " ";
            } else {
              xShift = 0;
              yShift = 0;
              xRadius = 0;
              yRadius = 0;
              if (point.curve === 'vertical') {
                yShift = App.gs / 2;
                yRadius = App.gs;
              } else if (point.curve === 'horizontal') {
                xShift = App.gs / 2;
                xRadius = App.gs;
              }
              str += "L " + (point.x - xShift) + ", " + (point.y - yShift) + " ";
              str += "a1,1 0 0,1 " + xRadius + "," + yRadius + " ";
            }
          }
        }
        App.SVG.setAttribute.call(this.line, 'd', str);
        return this;
      };

      Line.prototype.resetPoints = function(points) {
        this.points = points;
        this.serialize();
        return this;
      };

      Line.prototype.remove = function() {
        this.removeFromDom();
        return this;
      };

      Line.prototype.removeFromDom = function() {
        return App.SVG.canvas.removeChild(this.line);
      };

      return Line;

    })();
  });

}).call(this);

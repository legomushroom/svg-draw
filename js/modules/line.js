// Generated by CoffeeScript 1.6.2
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define('line', ['ProtoClass', 'helpers'], function(ProtoClass, helpers) {
    var Line, _ref;

    return Line = (function(_super) {
      __extends(Line, _super);

      function Line() {
        _ref = Line.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      Line.prototype.initialize = function(o) {
        var path;

        this.o = o != null ? o : {};
        this.set('id', helpers.genHash());
        path = this.o.path;
        this.set('path', this.o.path);
        this.set('points', path.get('points'));
        this.addDomElement();
        return this;
      };

      Line.prototype.addDomElement = function() {
        var attr;

        attr = {
          id: this.get('id'),
          d: '',
          stroke: '#00DFFC',
          'stroke-width': 2,
          fill: 'none',
          'marker-mid': 'url(#marker-mid)',
          'marker-start': 'url(#marker-start)',
          'marker-end': 'url(#marker-end)'
        };
        this.line = App.SVG.createElement('path', attr);
        this.serialize();
        return App.SVG.lineToDom(this.get('id'), this.line);
      };

      Line.prototype.serialize = function() {
        var i, point, points, str, xRadius, xShift, yRadius, yShift, _i, _len;

        str = '';
        points = this.get('points');
        for (i = _i = 0, _len = points.length; _i < _len; i = ++_i) {
          point = points[i];
          if (i === 0 || i === this.get('points').length - 1) {
            if (this.get('path').direction === 'i') {
              point.x -= App.gs / 2;
            }
            if (this.get('path').direction === 'j') {
              point.y -= App.gs / 2;
            }
          }
          if (i === 0) {
            str += "M" + point.x + "," + point.y + " ";
          } else {
            if (point.curve == null) {
              str += "L " + point.x + ", " + point.y + " ";
            } else {
              xShift = yShift = xRadius = yRadius = 0;
              if (point.curve === 'vertical') {
                yShift = App.gs / 2;
                yRadius = App.gs;
                yShift = this.path.yPolar === 'minus' ? yShift - App.gs : yShift;
              } else if (point.curve === 'horizontal') {
                xShift = App.gs / 2;
                xRadius = App.gs;
                xShift = this.path.xPolar === 'minus' ? xShift - App.gs : xShift;
              }
              xRadius = this.path.xPolar === 'minus' ? -xRadius : xRadius;
              yRadius = this.path.yPolar === 'minus' ? -yRadius : yRadius;
              str += "L " + (point.x - xShift) + ", " + (point.y - yShift) + " ";
              str += "a1,1 0 0,1 " + xRadius + "," + yRadius + " ";
            }
          }
        }
        App.SVG.setAttribute.call(this.line, 'd', str);
        return this;
      };

      Line.prototype.resetPoints = function(points) {
        this.set('points', points);
        this.serialize();
        return this;
      };

      Line.prototype.remove = function() {
        this.removeFromDom();
        return this;
      };

      Line.prototype.removeFromDom = function() {
        return App.SVG.canvas.removeChild(this.line);
      };

      return Line;

    })(ProtoClass);
  });

}).call(this);

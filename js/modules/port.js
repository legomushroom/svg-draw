// Generated by CoffeeScript 1.6.2
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define('port', ['ProtoClass', 'path'], function(ProtoClass, Path) {
    var Port;

    Port = (function(_super) {
      __extends(Port, _super);

      Port.prototype.connections = [];

      Port.prototype.ij = null;

      function Port(o) {
        this.o = o != null ? o : {};
        this.o.parent && (this.parent = this.o.parent);
        this.o.role && (this.role = this.o.role);
        this.setIJ(this.o.role);
        this;
      }

      Port.prototype.onChange = function() {
        var conection, _i, _len, _ref, _results;

        _ref = this.connections;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          conection = _ref[_i];
          _results.push(connection.set('startIJ', this.ij));
        }
        return _results;
      };

      Port.prototype.addConnection = function(path) {
        if (!path) {
          path = new Path;
          path.connectedTo = this.parent;
          path.set({
            'startIJ': this.ij,
            'endIJ': this.ij
          });
          this.connections.push(path);
        } else {
          path.set('endIJ', {
            i: this.ij.i - 1,
            j: this.ij.j
          });
        }
        return path;
      };

      Port.prototype.setIJ = function(role) {
        var i, j;

        switch (role || this.role) {
          case 'top':
            i = this.parent.startIJ.i + ~~(this.parent.newSizeIJ.i / 2);
            j = this.parent.startIJ.j;
            this.set('ij', {
              i: i,
              j: j
            });
            break;
          case 'bottom':
            i = this.parent.startIJ.i + ~~(this.parent.newSizeIJ.i / 2);
            j = this.parent.startIJ.j + this.parent.newSizeIJ.j - 1;
            this.set('ij', {
              i: i,
              j: j
            });
            break;
          case 'left':
            i = this.parent.startIJ.i;
            j = this.parent.startIJ.j + ~~(this.parent.newSizeIJ.j / 2);
            this.set('ij', {
              i: i,
              j: j
            });
            break;
          case 'right':
            i = this.parent.startIJ.i + this.parent.newSizeIJ.i - 1;
            j = this.parent.startIJ.j + ~~(this.parent.newSizeIJ.j / 2);
            this.set('ij', {
              i: i,
              j: j
            });
        }
        return this;
      };

      return Port;

    })(ProtoClass);
    return Port;
  });

}).call(this);

// Generated by CoffeeScript 1.6.2
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define('port', ['ProtoClass', 'path'], function(ProtoClass, Path) {
    var Port, _ref;

    Port = (function(_super) {
      __extends(Port, _super);

      function Port() {
        _ref = Port.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      Port.prototype.initialize = function(o) {
        this.o = o != null ? o : {};
        this.path = null;
        console.log(this.o.coords);
        this.o.parent && (this.set('parent', this.o.parent));
        this.set({
          'connections': [],
          'ij': this.o.coords
        });
        this.addConnection(this.o.path);
        this.on('change', _.bind(this.onChange, this));
        return this;
      };

      Port.prototype.onChange = function() {
        var connection, i, _i, _len, _ref1;

        _ref1 = this.get('connections');
        for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
          connection = _ref1[i];
          connection.path.set("" + connection.direction + "IJ", this.get('ij'));
        }
        return App.grid.refreshGrid();
      };

      Port.prototype.addConnection = function(path) {
        var connections, direction, point;

        direction = '';
        if (path == null) {
          path = new Path;
          path.set({
            'connectedStart': this.get('parent'),
            'startIJ': this.get('ij'),
            'endIJ': this.get('ij')
          });
          direction = 'start';
        } else {
          point = path.currentAddPoint || 'endIJ';
          direction = point === 'startIJ' ? 'start' : 'end';
          if (point === 'startIJ') {
            path.set({
              'startIJ': this.get('ij'),
              'connectedStart': this.get('parent')
            });
          } else {
            path.set({
              'endIJ': this.get('ij'),
              'connectedEnd': this.get('parent')
            });
          }
        }
        connections = this.get('connections');
        connections.push({
          direction: direction,
          path: path,
          id: App.helpers.genHash()
        });
        this.set('connections', connections);
        this.path = path;
        this.path.on('change:endIJ', _.bind(this.pathChange, this));
        return path;
      };

      Port.prototype.pathChange = function() {
        var firstPoint, lastPoint, parent, points;

        if (this.positionType === 'fixed') {
          return;
        }
        points = this.path.get('points');
        firstPoint = points[0];
        lastPoint = points[points.length - 1];
        parent = this.get('parent');
        if (this.path.get('direction') === 'i') {
          if (this.path.get('xPolar') === 'plus') {
            return this.set('ij', {
              i: parent.get('endIJ').i,
              j: parent.get('startIJ').j + ~~(parent.get('h') / 2)
            });
          } else {
            return this.set('ij', {
              i: parent.get('startIJ').i - 1,
              j: parent.get('startIJ').j + ~~(parent.get('h') / 2)
            });
          }
        } else {
          if (this.path.get('yPolar') === 'plus') {
            return this.set('ij', {
              i: parent.get('startIJ').i + ~~(parent.get('w') / 2),
              j: parent.get('endIJ').j
            });
          } else {
            return this.set('ij', {
              i: parent.get('startIJ').i + ~~(parent.get('w') / 2),
              j: parent.get('startIJ').j - 1
            });
          }
        }
      };

      Port.prototype.setIJ = function() {
        var i, j, parent, parentStartIJ;

        if (this.positionType !== 'fixed') {
          parent = this.get('parent');
          parentStartIJ = parent.get('startIJ');
          i = parentStartIJ.i;
          j = parentStartIJ.j;
          this.set('ij', {
            i: i,
            j: j
          });
        } else {
          console.log('custom port');
        }
        return this;
      };

      return Port;

    })(ProtoClass);
    return Port;
  });

}).call(this);

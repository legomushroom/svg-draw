// Generated by CoffeeScript 1.6.2
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define('port', ['ProtoClass', 'path'], function(ProtoClass, Path) {
    var Port;

    Port = (function(_super) {
      __extends(Port, _super);

      function Port(o) {
        var _ref;

        this.o = o != null ? o : {};
        this.o.parent && (this.parent = this.o.parent);
        this.o.role && (this.role = this.o.role);
        if ((_ref = this.connections) == null) {
          this.connections = [];
        }
        this.setIJ(this.o.role);
        this;
      }

      Port.prototype.onChange = function() {
        var connection, i, _i, _len, _ref;

        _ref = this.connections;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          connection = _ref[i];
          connection.path.set("" + connection.direction + "IJ", this.ij);
        }
        return App.grid.refreshGrid();
      };

      Port.prototype.addConnection = function(path) {
        debugger;
        var direction, point;

        direction = '';
        if (path == null) {
          path = new Path;
          path.connectedTo = this.parent;
          path.set({
            'startIJ': this.ij,
            'endIJ': this.ij
          });
          direction = 'start';
        } else {
          point = path.currentAddPoint || 'endIJ';
          direction = point === 'startIJ' ? 'start' : 'end';
          path.set({
            point: this.ij
          });
        }
        this.connections.push({
          direction: direction,
          path: path,
          id: App.helpers.genHash()
        });
        return path;
      };

      Port.prototype.setIJ = function() {
        var i, j;

        i = this.parent.startIJ.i + ~~(this.parent.w / 2);
        j = this.parent.startIJ.j + ~~(this.parent.h / 2);
        this.set('ij', {
          i: i,
          j: j
        });
        return this;
      };

      return Port;

    })(ProtoClass);
    return Port;
  });

}).call(this);
